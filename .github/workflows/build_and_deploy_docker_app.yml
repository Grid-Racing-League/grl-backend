name: Build and Deploy Docker Application

on:
  push:
    branches: [ master ]

jobs:
  build_docker_image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Inject Secrets into appsettings.Production.json
        run: |
          sed -i 's|<DB_CONNECTION_STRING>|'"${{ secrets.DB_CONNECTION_STRING }}"'|g' src/GRL.Api/appsettings.json

      - name: Set Timestamp Tag for Docker Image
        run: echo "IMAGE_TAG=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Build and Tag Docker Image
        run: |
          docker build -t grl-api:${{ env.IMAGE_TAG }} -f src/GRL.Api/Dockerfile src
          docker tag grl-api:${{ env.IMAGE_TAG }} grl-api:latest

      - name: Save Docker Image as Tar File
        run: |
          docker save -o grl-api.tar grl-api:${{ env.IMAGE_TAG }} grl-api:latest

      - name: Prepare Docker Compose File
        run: |
          sed -i 's|<IMAGE_TAG>|'"${{ env.IMAGE_TAG }}"'|g' docker-compose.yml
          sed -i 's|<DB_NAME>|'"${{ secrets.DB_NAME }}"'|g' docker-compose.yml
          sed -i 's|<DB_USER>|'"${{ secrets.DB_USER }}"'|g' docker-compose.yml
          sed -i 's|<DB_PASSWORD>|'"${{ secrets.DB_PASSWORD }}"'|g' docker-compose.yml

      - name: Upload Docker Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-files
          path: |
            grl-api.tar
            docker-compose.yml

  deploy_to_server:
    needs: build_docker_image
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Artifacts
        uses: actions/download-artifact@v3
        with:
          name: docker-files
          path: ./

      - name: Configure SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOYMENT_KEY }}" > ~/.ssh/deployment_key
          chmod 600 ~/.ssh/deployment_key
          ssh-keyscan -H "${{ secrets.SERVER_ADDRESS }}" >> ~/.ssh/known_hosts

      - name: Transfer Files to Server
        run: |
          scp -i ~/.ssh/deployment_key docker-compose.yml grl-api.tar "${{ secrets.DEPLOYMENT_USER }}"@"${{ secrets.SERVER_ADDRESS }}":"${{ secrets.DOCKER_DEPLOY_PATH }}"

      - name: Ensure Docker Network Exists
        run: |
          ssh -i ~/.ssh/deployment_key "${{ secrets.DEPLOYMENT_USER }}"@"${{ secrets.SERVER_ADDRESS }}" '
            docker network ls | grep grl-backend || docker network create grl-backend
          '

      - name: Deploy Application
        run: |
          ssh -i ~/.ssh/deployment_key "${{ secrets.DEPLOYMENT_USER }}"@"${{ secrets.SERVER_ADDRESS }}" '
            cd "${{ secrets.DOCKER_DEPLOY_PATH }}"
            docker load -i grl-api.tar
            docker compose up -d --remove-orphans
            rm -f grl-api.tar
          '